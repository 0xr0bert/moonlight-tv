name: Release

on:
  release:
    types: [created]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  release-webos:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - uses: olegtarasov/get-tag@v2.1
        id: tagName

      - uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: 'npm'

      - name: Install webOS CLI
        run: sudo npm install -g @webosose/ares-cli

      - name: Install Dev Dependency
        run: npm install

      - name: Install Required Build Tools
        run: sudo apt-get -y -qq install cmake

      - name: Download webOS NDK
        run: wget -q https://github.com/openlgtv/buildroot-nc4/releases/download/webos-6e2e155/arm-webos-linux-gnueabi_sdk-buildroot.tar.gz -P /tmp

      - name: Extract webOS NDK
        run: |
          cd /tmp
          tar xzf arm-webos-linux-gnueabi_sdk-buildroot.tar.gz
          ./arm-webos-linux-gnueabi_sdk-buildroot/relocate-sdk.sh

      - name: Run easy_build
        run: TOOLCHAIN_FILE=/tmp/arm-webos-linux-gnueabi_sdk-buildroot/usr/share/buildroot/toolchainfile.cmake ./scripts/webos/easy_build.sh -DCMAKE_BUILD_TYPE=$BUILD_TYPE

      - name: Create Release (webOS)
        id: create_release_webos
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Release ${{ steps.tagName.outputs.tag }}
          allowUpdates: true
          omitNameDuringUpdate: true
          omitBodyDuringUpdate: true
          omitPrereleaseDuringUpdate: true
          artifacts: dist/*.ipk,dist/*.manifest.json

  release-raspi:
    runs-on: ubuntu-latest
    env:
      SYSROOT: "/opt/pi-sysroot"
      RASPBIAN_VERSION: "bullseye"

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - uses: olegtarasov/get-tag@v2.1
        id: tagName

      - name: Cache sysroot
        uses: actions/cache@v2
        id: sysroot-cache
        with:
          path: |
            /opt/pi-sysroot/bin
            /opt/pi-sysroot/lib
            /opt/pi-sysroot/opt
            /opt/pi-sysroot/usr
          key: ${{ runner.os }}-${{ env.RASPBIAN_VERSION }}-${{ hashFiles('./scripts/raspi/pi-sysroot-setup.sh') }}

      - name: Update packages
        run: sudo apt-get -qq update || true

      - name: Install Required Build Tools
        # Use qemu to support cross-architecture debootstrap
        run: sudo apt-get -y -qq install crossbuild-essential-armhf cmake gettext

      - name: Install Sysroot
        if: steps.sysroot-cache.outputs.cache-hit != 'true'
        run: |
          sudo apt-get -y -qq install debootstrap qemu-user-static
          sudo update-binfmts --enable qemu-arm
          sudo mkdir -p ${SYSROOT}
          sudo debootstrap --arch=armhf --no-check-gpg bullseye ${SYSROOT} http://raspbian.raspberrypi.org/raspbian/
          sudo RELEASE=${RASPBIAN_VERSION} chroot ${SYSROOT} bash < ${{github.workspace}}/scripts/raspi/pi-sysroot-setup.sh

      - name: Create Build Environment
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory ${{github.workspace}}/build

      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{github.workspace}}/build
        # Note the current convention is to use the -S and -B options here to specify source
        # and build directories, but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DTARGET_RASPI=ON -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}/scripts/raspi/PiCrossToolchain.cmake

      - name: Build
        working-directory: ${{github.workspace}}/build
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build . --config $BUILD_TYPE

      - name: Package
        working-directory: ${{github.workspace}}/build
        run: |
          cpack
          dpkg-scanpackages . > Release

      - name: Create Release (Raspberry Pi)
        id: create_release_raspi
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Release ${{ steps.tagName.outputs.tag }}
          allowUpdates: true
          omitNameDuringUpdate: true
          omitBodyDuringUpdate: true
          omitPrereleaseDuringUpdate: true
          artifacts: build/*.deb,build/Release
